From db8764cd0a6e915e9ed62f87307757488b3b74ee Mon Sep 17 00:00:00 2001
From: Andreas Hoffmann <ahoffmann17@gmail.com>
Date: Thu, 15 Apr 2021 09:26:52 +0200
Subject: [PATCH] Changes to use the lib in LabAnalyser

---
 calcArraySize.c        |   6 +-
 matOut.h               |   7 ++-
 mxCreateDoubleMatrix.c |   2 +-
 mxCreateString.c       |   6 +-
 mxCreateStructMatrix.c |   6 +-
 toolsMatlab.c          |  63 ++-------------------
 toolsMemory.c          | 125 ++++++++---------------------------------
 writeDataElement.c     |   4 +-
 writeStructArray.c     |  29 +++++++---
 9 files changed, 67 insertions(+), 181 deletions(-)

diff --git a/calcArraySize.c b/calcArraySize.c
index f8954da..8f9fdac 100644
--- a/calcArraySize.c
+++ b/calcArraySize.c
@@ -45,7 +45,7 @@ uint32_t	calcArraySize(mxArray* inArray){
 	uintptr_t	maxLengthFieldname = 0;
 	
 	
-	if (inArray == NULL){
+        if (inArray == NULL){
 		//printf("calcArraySize(): received null pointer: ");
 		/*
 		 * Size required by an empty mxArray:
@@ -75,7 +75,7 @@ uint32_t	calcArraySize(mxArray* inArray){
 	 * 		calculated here.
 	 */
 	if (inArray->isChild){
-		nBytes += 8;
+                nBytes += 8;
 	}
 	
 	/*
@@ -163,5 +163,5 @@ uint32_t	calcArraySize(mxArray* inArray){
 	 * 		TODO: this sounds confusing...
 	 */
 	//printf("nBytes+8: %lu\n", nBytes+8);
-	return nBytes +8;
+        return nBytes +8;
 }
diff --git a/matOut.h b/matOut.h
index db39924..415ffb0 100644
--- a/matOut.h
+++ b/matOut.h
@@ -23,9 +23,10 @@
 
 
 /*
- * Text written to file header
- */
-#define MATLAB_HEADER_TEXT "The cTraceo Acoustic Raytracing program. Signal Processing LABoratory, Universidade do Algarve 2011.                        "
+ * Text written to file header*/
+ 
+//#define MATLAB_HEADER_TEXT "The cTraceo Acoustic Raytracing program. Signal Processing LABoratory, Universidade do Algarve 2011.                        "
+#define MATLAB_HEADER_TEXT "LabAnalyser Export.                                                                                                         "
 
 /*
  * Definitions for matlab data types (miTYPE)
diff --git a/mxCreateDoubleMatrix.c b/mxCreateDoubleMatrix.c
index 241c214..db8e8e5 100644
--- a/mxCreateDoubleMatrix.c
+++ b/mxCreateDoubleMatrix.c
@@ -41,7 +41,7 @@ mxArray* mxCreateDoubleMatrix(uintptr_t nRows, uintptr_t nCols, uintptr_t numeri
 	}
 	
 	// allocate memory
-	outArray	= malloc(sizeof(mxArray));
+	outArray = (mxArray*) malloc(sizeof(mxArray));
 	if (outArray == NULL){
 		fatal("mxCreateDoubleMatrix(): memory allocation error.");
 	}
diff --git a/mxCreateString.c b/mxCreateString.c
index e1dec6a..dddae69 100644
--- a/mxCreateString.c
+++ b/mxCreateString.c
@@ -22,11 +22,12 @@
 #include <string.h>
 #include "matOut.h"
 
+
 mxArray* mxCreateString(const char *);
 
 mxArray* mxCreateString(const char *inString){
 	// allocate memory for struct
-	mxArray*	outArray = malloc(sizeof(mxArray));
+	mxArray*	outArray = (mxArray*) malloc(sizeof(mxArray));
 	if (outArray == NULL){
 		fatal("mxCreateString(): memory allocation error.");
 	}
@@ -55,6 +56,7 @@ mxArray* mxCreateString(const char *inString){
 	//strncpy(char* dst, const char* src, size_t size);
 	strncpy(outArray->pr_char, inString, strlen(inString));
 	//printf("strlen(inString): %u", (uint32_t)strlen(inString));
-	
+	//strncpy_s(outArray->pr_char, (size_t)strlen(inString), (const char*)inString, (size_t)strlen(inString));
+
 	return outArray;
 }
diff --git a/mxCreateStructMatrix.c b/mxCreateStructMatrix.c
index 26ed196..9a978dd 100644
--- a/mxCreateStructMatrix.c
+++ b/mxCreateStructMatrix.c
@@ -37,7 +37,7 @@ mxArray* mxCreateStructMatrix(uintptr_t nRows, uintptr_t nCols, uintptr_t nField
 	}
 	
 	// allocate memory
-	outArray	= malloc(nRows*nCols*sizeof(mxArray));
+	outArray = (mxArray*) malloc(nRows*nCols*sizeof(mxArray));
 	if (outArray == NULL){
 		fatal("mxCreateStructMatrix(): memory allocation error.");
 	}
@@ -54,7 +54,7 @@ mxArray* mxCreateStructMatrix(uintptr_t nRows, uintptr_t nCols, uintptr_t nField
 		outArray[iStruct].isStruct			= true;
 		outArray[iStruct].isChild 			= false;
 		outArray[iStruct].nFields			= nFields;
-		outArray[iStruct].fieldNames		= malloc(nFields*sizeof(char*));
+		outArray[iStruct].fieldNames		= (char**) malloc(nFields*sizeof(char*));
 		
 		//copy fieldnames into struct info
 		for (uintptr_t iField=0; iField<nFields; iField++){
@@ -69,7 +69,7 @@ mxArray* mxCreateStructMatrix(uintptr_t nRows, uintptr_t nCols, uintptr_t nField
 		outArray[iStruct].pi_double	= NULL;
 		outArray[iStruct].pr_char	= NULL;
 		outArray[iStruct].field		= NULL;
-		outArray[iStruct].field		= malloc(nFields*sizeof(mxArray*));
+		outArray[iStruct].field = (mxArray**) malloc(nFields*sizeof(mxArray*));
 		if (outArray[iStruct].field	== NULL){
 			fatal("mxCreateStructMatrix(): memory allocation error.\n");
 		}
diff --git a/toolsMatlab.c b/toolsMatlab.c
index 4f6a342..45b074c 100644
--- a/toolsMatlab.c
+++ b/toolsMatlab.c
@@ -41,10 +41,6 @@ void    copyDoubleToPtr2D(double**, double*, uintptr_t, uintptr_t);
 void    copyDoubleToMxArray2D(double**, mxArray*, uintptr_t, uintptr_t);
 void    copyDoubleToPtr2D_transposed(double**, mxArray*, uintptr_t, uintptr_t);
         
-void    copyComplexToMxArray(complex double*, mxArray*, uintptr_t);
-void    copyComplexToMxArray2D(complex double**, mxArray*, uintptr_t, uintptr_t);
-void    copyComplexToMxArray2D_transposed(complex double**, mxArray*, uintptr_t, uintptr_t);
-
 
 
 ///Functions:
@@ -62,7 +58,7 @@ void    copyDoubleToMxArray(double* origin, mxArray* dest, uintptr_t nItems){
     uintptr_t   i;
     double* destReal = NULL;
     
-    destReal = mxGetData(dest);
+	destReal = (double*)mxGetData(dest);
     
     for( i=0; i<nItems; i++ ){
         destReal[i] = origin[i];
@@ -73,7 +69,7 @@ void    copyUInt32ToMxArray(uint32_t* origin, mxArray* dest, uintptr_t nItems){
     uintptr_t   i;
     double* destReal = NULL;
     
-    destReal = mxGetData(dest);
+	destReal = (double*) mxGetData(dest);
     
     for( i=0; i<nItems; i++ ){
         destReal[i] = (double)origin[i];
@@ -84,7 +80,7 @@ void    copyBoolToMxArray(bool* origin, mxArray* dest, uintptr_t nItems){
     uintptr_t   i;
     double* destReal = NULL;
     
-    destReal = mxGetData(dest);
+	destReal = (double*) mxGetData(dest);
     
     for( i=0; i<nItems; i++ ){
         destReal[i] = (double)origin[i];
@@ -106,7 +102,7 @@ void    copyDoubleToMxArray2D(double** origin, mxArray* dest, uintptr_t rowSize,
     uintptr_t   i,j;
     double* destReal = NULL;
     
-    destReal = mxGetData(dest);
+	destReal = (double*) mxGetData(dest);
 
     for( j=0; j<colSize; j++ ){
         for(i=0; i<rowSize; i++){
@@ -119,7 +115,7 @@ void    copyDoubleToPtr2D_transposed(double** origin, mxArray* dest, uintptr_t d
     uintptr_t   i,j;
     double* destReal = NULL;
     
-    destReal = mxGetData(dest);
+	destReal = (double*) mxGetData(dest);
     
     for( j=0; j<dimR; j++ ){
         for(i=0; i<dimZ; i++){
@@ -127,52 +123,3 @@ void    copyDoubleToPtr2D_transposed(double** origin, mxArray* dest, uintptr_t d
         }
     }
 }
-
-void    copyComplexToMxArray(complex double* origin, mxArray* dest, uintptr_t nItems){
-    uintptr_t   i;
-    double* destImag = NULL;
-    double* destReal = NULL;
-    
-    //get a pointer to the real and imaginary parts of the destination:
-    destReal = mxGetData(dest);
-    destImag = mxGetImagData(dest);
-    
-    for( i=0; i<nItems; i++ ){
-        destReal[i] = creal(origin[i]);
-        destImag[i] = cimag(origin[i]);
-    }
-}
-
-void    copyComplexToMxArray2D(complex double** origin, mxArray* dest, uintptr_t dimZ, uintptr_t dimR){
-    uintptr_t   i,j;
-    double* destImag = NULL;
-    double* destReal = NULL;
-    
-    //get a pointer to the real and imaginary parts of the destination:
-    destReal = mxGetData(dest);
-    destImag = mxGetImagData(dest);
-    
-    for( j=0; j<dimR; j++ ){
-        for(i=0; i<dimZ; i++){
-            destReal[j + i*dimR] = creal(origin[j][i]);
-            destImag[j + i*dimR] = cimag(origin[j][i]);
-        }
-    }
-}
-
-void    copyComplexToMxArray2D_transposed(complex double** origin, mxArray* dest, uintptr_t dimZ, uintptr_t dimR){
-    uintptr_t   i,j;
-    double*     destImag = NULL;
-    double*     destReal = NULL;
-    
-    //get a pointer to the real and imaginary parts of the destination:
-    destReal = mxGetData(dest);
-    destImag = mxGetImagData(dest);
-    
-    for( j=0; j<dimR; j++ ){
-        for(i=0; i<dimZ; i++){
-            destReal[j*dimZ + i] = creal(origin[j][i]);
-            destImag[j*dimZ + i] = cimag(origin[j][i]);
-        }
-    }
-}
diff --git a/toolsMemory.c b/toolsMemory.c
index e98c2e7..fa8d805 100644
--- a/toolsMemory.c
+++ b/toolsMemory.c
@@ -47,11 +47,8 @@ double*         reallocDouble(double*, uintptr_t);
 void            freeDouble(double*);
 double**        mallocDouble2D(uintptr_t, uintptr_t);
 void            freeDouble2D(double**, uintptr_t);
-complex double* mallocComplex(uintptr_t);
-complex double* reallocComplex(complex double*, uintptr_t);
-void            freeComplex(complex double*);
-complex double** mallocComplex2D(uintptr_t, uintptr_t);
-void            freeComplex2D(complex double**, uintptr_t);
+
+
 
 ///Functions:
 
@@ -63,7 +60,7 @@ char*               mallocChar(uintptr_t numChars){
     */
     
     char*   temp = NULL;    //temporary pointer
-    temp = malloc((size_t)numChars*sizeof(char));
+	temp = (char*) malloc((size_t)numChars*sizeof(char));
     if (temp == NULL){
         fatal("Memory allocation error.\n");
     }
@@ -78,7 +75,7 @@ bool*           mallocBool(uintptr_t numBools){
     */
     bool*   temp = NULL;    //temporary pointer
 
-    temp = malloc(numBools*sizeof(bool));
+	temp = (bool*) malloc(numBools*sizeof(bool));
     return temp;
 }
 
@@ -88,18 +85,18 @@ bool*           reallocBool(bool* old, uintptr_t numBools){
         exits with error code otherwise.
     */
     DEBUG(10,"reallocBool(),\t in\n");
-    bool*   new = NULL;
+    bool*   new1 = NULL;
 
     if(numBools == 0){
         free(old);
     }else{
-        new = realloc(old, numBools*sizeof(bool));
-        if (new == NULL){
+		new1 = (bool*) realloc(old, numBools*sizeof(bool));
+        if (new1 == NULL){
             fatal("Memory allocation error.\n");
         }
     }
     DEBUG(10,"reallocBool(),\t out\n");
-    return new;
+    return new1;
 }
 
 uint32_t*           mallocUint(uintptr_t numUints){
@@ -109,7 +106,7 @@ uint32_t*           mallocUint(uintptr_t numUints){
     */
     uint32_t*   temp = NULL;    //temporary pointer
 
-    temp = malloc(numUints*sizeof(uint32_t));
+	temp = (uint32_t*) malloc(numUints*sizeof(uint32_t));
     return temp;
 }
 
@@ -119,18 +116,18 @@ uint32_t*           reallocUint(uint32_t* old, uintptr_t numUints){
         exits with error code otherwise.
     */
     DEBUG(10,"reallocUint(),\t in\n");
-    uint32_t*   new = NULL;
+    uint32_t*   new1 = NULL;
 
     if(numUints == 0){
         free(old);
     }else{
-        new = realloc(old, numUints*sizeof(uint32_t));
-        if (new == NULL){
+		new1 = (uint32_t*) realloc(old, numUints*sizeof(uint32_t));
+        if (new1 == NULL){
             fatal("Memory allocation error.\n");
         }
     }
     DEBUG(10,"reallocUint(),\t out\n");
-    return new;
+    return new1;
 }
 
 int32_t*            mallocInt(uintptr_t numInts){
@@ -140,7 +137,7 @@ int32_t*            mallocInt(uintptr_t numInts){
     */
     int32_t*    temp = NULL;    //temporary pointer
 
-    temp = malloc(numInts*sizeof(int32_t));
+	temp = (int32_t*)malloc(numInts*sizeof(int32_t));
     return temp;
 }
 
@@ -149,17 +146,17 @@ int32_t*            reallocInt(int32_t* old, uintptr_t numInts){
         Allocates a char string and returns a pointer to it in case of success,
         exits with error code otherwise.
     */
-    int32_t*    new = NULL;
+    int32_t*    new1 = NULL;
     
     if(numInts == 0){
         free(old);
     }else{
-        new = realloc(old, numInts*sizeof(int32_t));
-        if (new == NULL){
+		new1 = (int32_t*) realloc(old, numInts*sizeof(int32_t));
+        if (new1 == NULL){
             fatal("Memory allocation error.\n");
         }
     }
-    return new;
+    return new1;
 }
 
 double*             mallocDouble(uintptr_t numDoubles){
@@ -169,7 +166,7 @@ double*             mallocDouble(uintptr_t numDoubles){
     */
     DEBUG(9,"mallocDouble(),\tin\n");
     double* temp = NULL;    //temporary pointer
-    temp = malloc(numDoubles * sizeof(double));
+	temp = (double*)malloc(numDoubles * sizeof(double));
     if(temp == NULL){
         fatal("Memory alocation error.\n");
     }
@@ -179,18 +176,18 @@ double*             mallocDouble(uintptr_t numDoubles){
     
 double*             reallocDouble(double* old, uintptr_t numDoubles){
     DEBUG(10,"reallocDouble(),\tin\n");
-    double*     new = NULL;
+    double*     new1 = NULL;
     
     if(numDoubles == 0){
         free(old);
     }else{
-        new = realloc(old, numDoubles*sizeof(double));
-        if (new == NULL){
+		new1 = (double*)realloc(old, numDoubles*sizeof(double));
+        if (new1 == NULL){
             fatal("Memory allocation error.\n");
         }
     }
     DEBUG(10,"reallocDouble(),\tout\n");
-    return new;
+    return new1;
 }
     
 void                freeDouble(double* greenMile){
@@ -208,7 +205,7 @@ double**            mallocDouble2D(uintptr_t numRows, uintptr_t numCols){
 
     uint32_t    i;
     double**    array = NULL;
-    array = malloc(numRows * sizeof(uintptr_t*));   //malloc an array of pointers
+	array = (double**)malloc(numRows * sizeof(uintptr_t*));   //malloc an array of pointers
     
     if(array == NULL)
         fatal("Memory allocation error.\n");
@@ -233,77 +230,3 @@ void                freeDouble2D(double** greenMile, uintptr_t items){
     }
     free(greenMile);
 }
-
-complex double*     mallocComplex(uintptr_t numComplex){
-    complex double* temp = NULL;
-    uintptr_t       i;
-    
-    temp = malloc(numComplex * sizeof(complex double));
-    if(temp == NULL)
-        fatal("Memory alocation error.");
-    //Initialize to zero:
-    for (i=0; i<numComplex; i++){
-        temp[i] = 0 + 0*I;
-    }
-    
-    return temp;
-}
-
-complex double*     reallocComplex(complex double* old, uintptr_t numComplex){
-    complex double* new = NULL;
-
-    if(numComplex == 0){
-        free(old);
-    }else{
-        new = realloc(old, numComplex*sizeof(complex double));
-        if (new == NULL){
-            fatal("Memory allocation error.\n");
-        }
-    }
-    return new;
-}
-
-void                freeComplex(complex double* greenMile){
-    if(greenMile != NULL){
-        free(greenMile);
-    }
-}
-
-complex double**    mallocComplex2D(uintptr_t numRows, uintptr_t numCols){
-    /*
-     * Returns a pointer to an array of pointer do doubles.
-     * Or:
-     * Return a 2D Array.
-     */
-
-    uint32_t    i;
-    complex double**    array = NULL;
-    array = malloc(numRows * sizeof(uintptr_t*));   //malloc an array of pointers
-    
-    if(array == NULL)
-        fatal("Memory allocation error.\n");
-
-    for(i = 0; i < numRows; i++){
-        array[i] = mallocComplex(numCols);  //Nota that mallocDouble() already checks for allocation errors
-    }
-
-    return array;
-}
-
-void                freeComplex2D(complex double** greenMile, uintptr_t items){
-    /*
-     * frees the memory allocated to a double pointer of type complex double.
-     */
-     uintptr_t  i;
-     
-    for(i=0; i<items; i++){
-        if(greenMile[i] != NULL){
-            free(greenMile[i]);
-        }
-    }
-    free(greenMile);
-}
-
-
-
-
diff --git a/writeDataElement.c b/writeDataElement.c
index 5f22153..ec5116d 100644
--- a/writeDataElement.c
+++ b/writeDataElement.c
@@ -61,10 +61,10 @@ void writeDataElement(FILE* outfile, uint32_t miTYPE, void* data, size_t dataIte
     if (miTYPE == mxCHAR_CLASS){
         //Again, because mxCharClass is strange, we have to write one char
         //at a time, each followed by a null byte
-        uint8_t     *tempPtr = data;
+		uint8_t     *tempPtr = (uint8_t*) data;
         tempUInt8 = 0x00;
         
-        for (uintptr_t iChar=0; iChar<strlen(data); iChar++){
+        for (uintptr_t iChar=0; iChar<strlen((const char*)data); iChar++){
             discard = fwrite(tempPtr, sizeof(uint8_t), 1, outfile); (void)discard;
             tempPtr += 1;
             discard = fwrite(&tempUInt8, sizeof(uint8_t), 1, outfile); (void)discard;
diff --git a/writeStructArray.c b/writeStructArray.c
index 23e8604..03c4207 100644
--- a/writeStructArray.c
+++ b/writeStructArray.c
@@ -21,6 +21,7 @@
 #include <stdio.h>
 #include <stdint.h>
 #include "matOut.h"
+#include "mxDestroyArray.c"
 
 uintptr_t   writeStructArray(       MATFile* outfile, const char* arrayName, mxArray* inArray);
 
@@ -29,6 +30,8 @@ uintptr_t   writeStructArray(MATFile* outfile, const char* arrayName, mxArray* i
      * writes a structure array to an open matfile.
      */
     uint32_t    tempUInt32;
+    uint16_t    tempUInt16;
+
     uint8_t     tempUInt8;
     uintptr_t   maxLengthFieldname = 0;
     uintptr_t   nBytes, paddingBytes = 0;
@@ -50,13 +53,17 @@ uintptr_t   writeStructArray(MATFile* outfile, const char* arrayName, mxArray* i
      * NOTE: The array name is only written if the struct is
      *       not a child of another struct.
      */
-    tempUInt32  = inArray->nBytes + 8;
+    tempUInt32  = inArray->nBytes;
     //printf("total size without array name: %u\n", tempUInt32);
     if(inArray->isChild == false){
+        tempUInt32 = tempUInt32 + 8;
         // add size for full lines
-        tempUInt32 += strlen(arrayName) / 8;
+        tempUInt32 += (strlen(arrayName) / 8)*8;
+        int t1 = strlen(arrayName);
+      //  int t2 = t1/8;
+       // tempUInt32 +=t2*8;
         // if padding is required, include another full line
-        if ( (strlen(arrayName) % 8) > 0) {
+        if ( t1 % 8 > 0) {
             tempUInt32 += 8;
         }
     }
@@ -100,18 +107,21 @@ uintptr_t   writeStructArray(MATFile* outfile, const char* arrayName, mxArray* i
      * write the struct array's name
      * "1"(2B), "miINT8"(2B), "X"(1B), "padding"(3B)
      */
-    tempUInt32  = miINT8;
-    discard = fwrite(&tempUInt32, sizeof(uint32_t), 1, outfile); (void)discard;
-    
+
     if(inArray->isChild == false){
+
+        tempUInt32  = miINT8;
+        discard = fwrite(&tempUInt32, sizeof(uint32_t), 1, outfile); (void)discard;
+
+
         tempUInt32  = strlen(arrayName);
         discard = fwrite(&tempUInt32, sizeof(uint32_t), 1, outfile); (void)discard;
-        
+
         for (uintptr_t i=0; i<strlen(arrayName); i++){
             tempUInt8   = arrayName[i];
             discard = fwrite(&tempUInt8, sizeof(uint8_t), 1, outfile); (void)discard;
         }
-        
+
         //write padding at end:
         nBytes = strlen(arrayName);
         if (nBytes % 8 > 0){
@@ -123,6 +133,8 @@ uintptr_t   writeStructArray(MATFile* outfile, const char* arrayName, mxArray* i
         }
     }else{
         // this struct is a child of another struct => don't write it's name (it is saved in the parent's fieldNames)
+        tempUInt32  = miINT8;
+        discard = fwrite(&tempUInt32, sizeof(uint32_t), 1, outfile); (void)discard;
         tempUInt32  = 0x00;
         discard = fwrite(&tempUInt32, sizeof(uint32_t), 1, outfile); (void)discard;
     }
@@ -210,5 +222,6 @@ uintptr_t   writeStructArray(MATFile* outfile, const char* arrayName, mxArray* i
     }
     
      
+    mxDestroyArray(inArray);
     return 0;
 }
-- 
2.17.0.windows.1

